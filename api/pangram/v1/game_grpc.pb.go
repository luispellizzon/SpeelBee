// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: pangram/v1/game.proto

package gamepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameManager_CreateGame_FullMethodName = "/pangram.v1.GameManager/CreateGame"
	GameManager_SubmitWord_FullMethodName = "/pangram.v1.GameManager/SubmitWord"
)

// GameManagerClient is the client API for GameManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameManagerClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	SubmitWord(ctx context.Context, in *SubmitWordRequest, opts ...grpc.CallOption) (*SubmitWordResponse, error)
}

type gameManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameManagerClient(cc grpc.ClientConnInterface) GameManagerClient {
	return &gameManagerClient{cc}
}

func (c *gameManagerClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, GameManager_CreateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) SubmitWord(ctx context.Context, in *SubmitWordRequest, opts ...grpc.CallOption) (*SubmitWordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitWordResponse)
	err := c.cc.Invoke(ctx, GameManager_SubmitWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameManagerServer is the server API for GameManager service.
// All implementations must embed UnimplementedGameManagerServer
// for forward compatibility.
type GameManagerServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	SubmitWord(context.Context, *SubmitWordRequest) (*SubmitWordResponse, error)
	mustEmbedUnimplementedGameManagerServer()
}

// UnimplementedGameManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameManagerServer struct{}

func (UnimplementedGameManagerServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameManagerServer) SubmitWord(context.Context, *SubmitWordRequest) (*SubmitWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWord not implemented")
}
func (UnimplementedGameManagerServer) mustEmbedUnimplementedGameManagerServer() {}
func (UnimplementedGameManagerServer) testEmbeddedByValue()                     {}

// UnsafeGameManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameManagerServer will
// result in compilation errors.
type UnsafeGameManagerServer interface {
	mustEmbedUnimplementedGameManagerServer()
}

func RegisterGameManagerServer(s grpc.ServiceRegistrar, srv GameManagerServer) {
	// If the following call pancis, it indicates UnimplementedGameManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameManager_ServiceDesc, srv)
}

func _GameManager_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameManager_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_SubmitWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).SubmitWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameManager_SubmitWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).SubmitWord(ctx, req.(*SubmitWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameManager_ServiceDesc is the grpc.ServiceDesc for GameManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pangram.v1.GameManager",
	HandlerType: (*GameManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GameManager_CreateGame_Handler,
		},
		{
			MethodName: "SubmitWord",
			Handler:    _GameManager_SubmitWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pangram/v1/game.proto",
}
